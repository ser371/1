name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: false
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: false
      ts_authkey:
        description: "Tailscale auth key (reusable or ephemeral)"
        required: false
      gh_api_token:
        description: "GitHub PAT with access to Repo A & Repo B"
        required: false
      b_repo:
        description: "Target repo for Workflow B (owner/repo)"
        required: false
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"
      save_data:
        description: "Save these values for next run?"
        type: boolean
        default: true

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: Bullettemporary
  RDP_PASS: Bullet@12345
  TS_HOSTNAME: bullet

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üì• Restore saved config if inputs are empty
        id: restore
        run: |
          $file = "$env:GITHUB_WORKSPACE/saved-config.json"
          if (Test-Path $file) {
            Write-Host "Found saved config"
            $cfg = Get-Content $file | ConvertFrom-Json
            "tailnet=$($cfg.ts_tailnet)"   | Out-File -Append $env:GITHUB_OUTPUT
            "apikey=$($cfg.ts_api_key)"    | Out-File -Append $env:GITHUB_OUTPUT
            "authkey=$($cfg.ts_authkey)"   | Out-File -Append $env:GITHUB_OUTPUT
            "pat=$($cfg.gh_api_token)"     | Out-File -Append $env:GITHUB_OUTPUT
            "b_repo=$($cfg.b_repo)"        | Out-File -Append $env:GITHUB_OUTPUT
          }

      - name: üîß Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET:  ${{ inputs.ts_tailnet || steps.restore.outputs.tailnet }}
          RAW_APIKEY:   ${{ inputs.ts_api_key || steps.restore.outputs.apikey }}
          RAW_AUTHKEY:  ${{ inputs.ts_authkey || steps.restore.outputs.authkey }}
          RAW_PAT:      ${{ inputs.gh_api_token || steps.restore.outputs.pat }}
          RAW_BREPO:    ${{ inputs.b_repo || steps.restore.outputs.b_repo }}
          RAW_TEST:     ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME:  ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS:    ${{ inputs.loops || '0' }}
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){[int]$v}else{[int]$def} }
          $tailnet = $env:RAW_TAILNET
          $apiKey  = $env:RAW_APIKEY
          $authKey = $env:RAW_AUTHKEY
          $pat     = $env:RAW_PAT
          $bRepo   = $env:RAW_BREPO
          if (-not $tailnet -or -not $apiKey -or -not $authKey -or -not $pat -or -not $bRepo) {
            Write-Error "Missing required inputs"; exit 1
          }
          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')
          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }
          if (-not $isTest -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }
          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "pat=$pat"         | Out-File -Append $env:GITHUB_OUTPUT
          "b_repo=$bRepo"    | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT

      - name: üíæ Save config for future runs
        if: ${{ inputs.save_data }}
        run: |
          $cfg = @{
            ts_tailnet   = "${{ steps.cfg.outputs.tailnet }}"
            ts_api_key   = "${{ steps.cfg.outputs.apikey }}"
            ts_authkey   = "${{ steps.cfg.outputs.authkey }}"
            gh_api_token = "${{ steps.cfg.outputs.pat }}"
            b_repo       = "${{ steps.cfg.outputs.b_repo }}"
          }
          $cfg | ConvertTo-Json | Out-File "$env:GITHUB_WORKSPACE/saved-config.json" -Encoding utf8

      # ‚Ä¶ (install tailscale, enable RDP, purge, up, keep-alive, purge exit)

      - name: üîÅ Dispatch workflow B (different repo)
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching."; exit 0 }
          if ($loops -gt 1) { $next=$loops-1 } else { $next=0 }
          $token="${{ steps.cfg.outputs.pat }}"
          $bRepo="${{ steps.cfg.outputs.b_repo }}"
          $body=@{
            ref    = "main"
            inputs = @{
              ts_tailnet      = "${{ steps.cfg.outputs.tailnet }}"
              ts_api_key      = "${{ steps.cfg.outputs.apikey }}"
              ts_authkey      = "${{ steps.cfg.outputs.authkey }}"
              gh_api_token    = "$token"
              a_repo          = "${{ github.repository }}"
              test_mode       = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops           = "$next"
              save_data       = "${{ inputs.save_data }}"
            }
          } | ConvertTo-Json -Depth 5
          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/$bRepo/actions/workflows/windows-rdp-tailscale-B.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
