name: RDP via Tailscale (A → B, save-data, cross-account, Win2025, ≤10 inputs)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:      { description: "Tailscale tailnet (email). Blank = use saved config", required: false, default: "" }
      ts_api_key:      { description: "Tailscale API key (no 'Bearer'). Blank = use saved", required: false, default: "" }
      ts_authkey:      { description: "Tailscale Auth key. Blank = use saved", required: false, default: "" }
      test_mode:       { description: "Run 5-minute test", type: boolean, default: false }
      runtime_minutes: { description: "Max 360; capped 355. Blank=saved/355", required: false, default: "355" }
      purge_bullet:    { description: "Purge 'bullet' devices at start/end", required: false, default: "true" }
      x_repo_path:     { description: "Transfer repo owner/repo (releases). Blank=disable/use saved", required: false, default: "" }
      tg_json:         { description: "JSON: {\"token\":\"...\",\"chat\":\"...\"}", required: false, default: "" }
      cross_json:      { description: "JSON: {\"a_repo_path\":\"\",\"b_repo_path\":\"\",\"gh_token_a\":\"\",\"gh_token_b\":\"\",\"cycles\":0}", required: false, default: "" }
      save_data:       { description: "Save resolved values to .github/rdp-config.json", type: boolean, default: true }

permissions:
  contents: write
  actions: write

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

defaults:
  run:
    shell: pwsh

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370
    env:
      RDP_USER:    Bullettemporary
      RDP_PASS:    Bullet@12345
      TS_HOSTNAME: bullet
      X_DIR:       C:\Users\Public\Transfer
      X_TAG:       pingpong-handoff
    steps:
      - name: Checkout (for config save/load)
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Build & run (A)
        run: |
          $ErrorActionPreference = "Stop"
          function IntOr($v,$def){ if("$v" -match '^\s*\d+\s*$'){ [int]$v } else { [int]$def } }
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function Summary($title,[string[]]$lines){ (@("### $title") + $lines + "") -join "`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          function Fill($in,$cfg){ if([string]::IsNullOrWhiteSpace($in) -and $cfg){$cfg}else{$in} }

          # -- Load saved config if present
          $CfgPath = Join-Path $env:GITHUB_WORKSPACE ".github\rdp-config.json"
          $cfg = $null
          if (Test-Path -LiteralPath $CfgPath) { try { $cfg = Get-Content -LiteralPath $CfgPath -Raw | ConvertFrom-Json } catch {} }

          # -- Parse JSON inputs
          $tg = $null
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.tg_json }}")) {
            try { $tg = "${{ inputs.tg_json }}" | ConvertFrom-Json } catch {}
          }
          $cx = $null
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.cross_json }}")) {
            try { $cx = "${{ inputs.cross_json }}" | ConvertFrom-Json } catch {}
          }

          # -- Merge inputs with config
          $tailnet   = Fill "${{ inputs.ts_tailnet }}"  $cfg.ts_tailnet
          $apiKey    = Fill "${{ inputs.ts_api_key }}"  $cfg.ts_api_key
          $authKey   = Fill "${{ inputs.ts_authkey }}"  $cfg.ts_authkey
          $runtime   = IntOr("${{ inputs.runtime_minutes }}", $(if($cfg.runtime_minutes){[int]$cfg.runtime_minutes}else{355}))
          if (${{ inputs.test_mode }}) { $runtime = 5 } elseif ($runtime -lt 6) { $runtime = 355 } elseif ($runtime -gt 360) { $runtime = 355 }
          $doPurge   = Yes("${{ inputs.purge_bullet }}")
          $xRepoPath = Fill "${{ inputs.x_repo_path }}" $cfg.x_repo_path

          $tgToken = Fill ($(if($tg){$tg.token}else{$null})) $cfg.tg_token
          $tgChat  = Fill ($(if($tg){$tg.chat }else{$null})) $cfg.tg_chat
          $tgEnabled = -not [string]::IsNullOrWhiteSpace($tgToken) -and -not [string]::IsNullOrWhiteSpace($tgChat)

          $bRepoPath = Fill ($(if($cx){$cx.b_repo_path}else{$null})) $cfg.b_repo_path
          $ghTokenA  = Fill ($(if($cx){$cx.gh_token_a }else{$null})) $cfg.gh_token_a
          $ghTokenB  = Fill ($(if($cx){$cx.gh_token_b }else{$null})) $cfg.gh_token_b
          $cycles    = if($cx -and $cx.psobject.Properties.Name -contains 'cycles'){ [int]$cx.cycles } elseif($cfg.cycles){ [int]$cfg.cycles } else { 0 }

          function TgSend([string]$text){
            if(-not $tgEnabled){ return }
            for($i=0; $i -lt $text.Length; $i+=3900){
              $chunk=$text.Substring($i,[Math]::Min(3900,$text.Length-$i))
              try{ Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendMessage" -f $tgToken) -ContentType "application/x-www-form-urlencoded" -Body @{chat_id=$tgChat; text=$chunk; parse_mode="Markdown"} -UseBasicParsing | Out-Null }catch{}
            }
          }
          function TgSendPhoto([string]$p,[string]$cap){
            if(-not $tgEnabled -or -not (Test-Path -LiteralPath $p)){ return }
            try{
              $form=@{chat_id=$tgChat; caption=$cap; parse_mode="Markdown"; photo=Get-Item -LiteralPath $p}
              Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendPhoto" -f $tgToken) -Form $form -UseBasicParsing | Out-Null
            }catch{
              try{ $form=@{chat_id=$tgChat; caption=$cap; parse_mode="Markdown"; document=Get-Item -LiteralPath $p}; Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendDocument" -f $tgToken) -Form $form -UseBasicParsing | Out-Null }catch{}
            }
          }

          # -- Transfer helpers
          function X-Ensure-Release([string]$repo,[string]$tag,[string]$pat){
            $base = "https://api.github.com/repos/$repo"
            $hdr  = @{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            try{ ((Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content | ConvertFrom-Json).id }
            catch{ $body=@{tag_name=$tag; name=$tag; draft=$false; prerelease=$false}|ConvertTo-Json; ((Invoke-WebRequest -Method POST -Uri "$base/releases" -Headers $hdr -Body $body -UseBasicParsing).Content|ConvertFrom-Json).id }
          }
          function X-Download-Latest([string]$repo,[string]$tag,[string]$prefix,[string]$out,[string]$pat){
            $base = "https://api.github.com/repos/$repo"; $hdr=@{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            try{ $rels=(Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content|ConvertFrom-Json }catch{ return $false }
            $asset=$rels.assets|Where-Object{ $_.name -like "$prefix*" }|Sort-Object created_at -Descending|Select-Object -First 1
            if(-not $asset){ return $false }
            Invoke-WebRequest -Uri $asset.browser_download_url -Headers $hdr -OutFile $out -UseBasicParsing; return $true
          }
          function X-Upload-Asset([string]$repo,[string]$relId,[string]$file,[string]$name,[string]$pat){
            $url="https://uploads.github.com/repos/$repo/releases/$relId/assets?name=$name"
            $hdr=@{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -ContentType "application/zip" -InFile $file -UseBasicParsing|Out-Null
          }

          # -- Summary
          Summary "Inputs (A)" @(
            "| Key | Value |","|---|---|",
            "| Runtime | $runtime |","| Cycles | $cycles |","| Hostname | $env:TS_HOSTNAME |",
            "| Transfer | " + ($(if($xRepoPath){$xRepoPath + "#" + $env:X_TAG}else{"(disabled)" })) + " |",
            "| Telegram | " + ($(if($tgEnabled){"on"}else{"off"})) + " |",
            "| Next Repo (B) | " + ($(if($bRepoPath){$bRepoPath}else{"(same repo)"})) + " |"
          )
          TgSend ("🟦 *A started* — runtime: *$runtime* min; next: *B*")

          # -- Tailscale & RDP
          $ts="C:\Program Files\Tailscale\tailscale.exe"
          if(-not (Test-Path $ts)){ $dst="$env:TEMP\tailscale-setup.exe"; Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe' -OutFile $dst -UseBasicParsing; Start-Process $dst -ArgumentList "/quiet" -Wait }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          $u=$env:RDP_USER;$p=$env:RDP_PASS;$sec=ConvertTo-SecureString $p -AsPlainText -Force
          if(-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)){ New-LocalUser -Name $u -Password $sec -AccountNeverExpires; Add-LocalGroupMember -Group Administrators -Member $u; Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u } else { Set-LocalUser -Name $u -Password $sec -AccountNeverExpires; Enable-LocalUser -Name $u }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          if($doPurge){
            try{
              $tn=[uri]::EscapeUriString($tailnet); $hdr=@{ Authorization = "Bearer $apiKey" }
              $resp=Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers $hdr -UseBasicParsing
              $json=$resp.Content|ConvertFrom-Json
              foreach($d in $json.devices){
                if(($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet')){
                  try{ Invoke-WebRequest -Method Delete -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) -Headers $hdr -UseBasicParsing | Out-Null }catch{}
                }
              }
            }catch{}
          }

          & $ts logout | Out-Null
          & $ts up --authkey "$authKey" --hostname "$env:TS_HOSTNAME" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2
          $ip4=(& $ts ip -4 | Select-Object -First 1); $st=& $ts status --json | ConvertFrom-Json
          Summary "RDP (A)" @("**User:** $env:RDP_USER","**Pass:** $env:RDP_PASS","**IPv4:** $ip4","**MagicDNS:** $($st.Self.DNSName)")

          # -- Screenshot (start)
          try{
            Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
            $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bmp=New-Object System.Drawing.Bitmap $b.Width,$b.Height
            $g=[System.Drawing.Graphics]::FromImage($bmp)
            $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
            $sp="$env:RUNNER_TEMP\rdp-start.png"
            $bmp.Save($sp,[System.Drawing.Imaging.ImageFormat]::Png)
            $g.Dispose(); $bmp.Dispose()
            TgSendPhoto $sp ("🖼 *A start screenshot* — {0}" -f (Get-Date).ToString("HH:mm:ss 'IST' dd-MMM"))
          }catch{}

          # -- Pull incoming from B (optional)
          if($xRepoPath -and $tgToken){
            New-Item -ItemType Directory -Path $env:X_DIR -Force | Out-Null
            $relId=X-Ensure-Release $xRepoPath $env:X_TAG $tgToken
            $inZip=Join-Path $env:RUNNER_TEMP "handoff_latest_from_B.zip"
            if(X-Download-Latest $xRepoPath $env:X_TAG "handoff_B_to_A_" $inZip $tgToken){
              try{ Expand-Archive -LiteralPath $inZip -DestinationPath $env:X_DIR -Force }catch{}
            }
          }

          # -- Keepalive + hourly Tg
          $end=(Get-Date).AddMinutes($runtime); $lastHour=-1
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            $hr=[int][math]::Floor($left/60)
            if($hr -ne $lastHour){ $lastHour=$hr; TgSend ("⏰ *A reminder*: $left min left (~$hr h)") }
            Start-Sleep -Seconds 60
          }

          # -- Screenshot (end)
          try{
            Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
            $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bmp=New-Object System.Drawing.Bitmap $b.Width,$b.Height
            $g=[System.Drawing.Graphics]::FromImage($bmp)
            $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
            $ep="$env:RUNNER_TEMP\rdp-end.png"
            $bmp.Save($ep,[System.Drawing.Imaging.ImageFormat]::Png)
            $g.Dispose(); $bmp.Dispose()
            TgSendPhoto $ep ("🖼 *A end screenshot* — {0}" -f (Get-Date).ToString("HH:mm:ss 'IST' dd-MMM"))
          }catch{}

          # -- Push outgoing to B (optional)
          if($xRepoPath -and $tgToken){
            $relId=X-Ensure-Release $xRepoPath $env:X_TAG $tgToken
            $stamp=(Get-Date).ToString("yyyyMMdd_HHmmss")
            $outZip=Join-Path $env:RUNNER_TEMP ("handoff_A_to_B_{0}.zip" -f $stamp)
            if(Test-Path $env:X_DIR -and (Get-ChildItem $env:X_DIR -Recurse -Force | Where-Object { -not $_.PSIsContainer })){
              if(Test-Path $outZip){ Remove-Item $outZip -Force }
              Compress-Archive -Path (Join-Path $env:X_DIR '*') -DestinationPath $outZip -Force
              X-Upload-Asset $xRepoPath $relId $outZip ($outZip|Split-Path -Leaf) $tgToken
            }
          }

          # -- Save data
          if (${{ inputs.save_data }}) {
            try{
              New-Item -ItemType Directory -Path (Split-Path -Parent $CfgPath) -Force | Out-Null
              $conf=[ordered]@{
                ts_tailnet=$tailnet; ts_api_key=$apiKey; ts_authkey=$authKey; runtime_minutes=$runtime; purge_bullet="${{ inputs.purge_bullet }}";
                x_repo_path=$xRepoPath; tg_token=$tgToken; tg_chat=$tgChat; b_repo_path=$bRepoPath; gh_token_a=$ghTokenA; gh_token_b=$ghTokenB; cycles=$cycles
              }
              ($conf|ConvertTo-Json -Depth 6)|Out-File -Encoding UTF8 $CfgPath
              Push-Location $env:GITHUB_WORKSPACE
              git config user.name "rdp-pingpong-bot"
              git config user.email "actions@users.noreply.github.com"
              if((git status --porcelain) -ne ""){ git add "$CfgPath"; git commit -m "chore(rdp A): save config $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"; git push }
              Pop-Location
            }catch{ Write-Warning "Save config failed: $_" }
          }

          # -- Dispatch B
          $targetRepo = if([string]::IsNullOrWhiteSpace($bRepoPath)){"${{ github.repository }}"}else{$bRepoPath}
          $sameRepo   = ($targetRepo -eq "${{ github.repository }}")
          $token      = if($sameRepo){"${{ github.token }}"}else{$ghTokenB}
          if(-not $sameRepo -and [string]::IsNullOrWhiteSpace($token)){ Write-Error "b_repo_path set but gh_token_b is empty."; exit 1 }

          $payload=@{
            ts_tailnet=$tailnet; ts_api_key=$apiKey; ts_authkey=$authKey; test_mode="false"; runtime_minutes="$runtime"; purge_bullet="${{ inputs.purge_bullet }}";
            x_repo_path=$xRepoPath;
            tg_json = if($tgEnabled) { @{ token=$tgToken; chat=$tgChat } | ConvertTo-Json } else { "" };
            cross_json = (@{ a_repo_path=""; b_repo_path=$bRepoPath; gh_token_a=$ghTokenA; gh_token_b=$ghTokenB; cycles=$(( $cycles -ge 1 ) ? ($cycles - 1) : 0) } | ConvertTo-Json);
            save_data="${{ inputs.save_data }}"
          }
          $url="https://api.github.com/repos/$targetRepo/actions/workflows/rdp-tailscale-B.yml/dispatches"
          $hdr=@{ Authorization="Bearer $token"; Accept="application/vnd.github+json"; "User-Agent"="rdp-pingpong" }
          $body=@{ ref="${{ github.ref_name }}"; inputs=$payload }|ConvertTo-Json -Depth 8
          Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body -UseBasicParsing | Out-Null
          Write-Host "Dispatched Workflow B to $targetRepo"

      - name: ⬆️ Upload screenshot (start)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-start-screenshot-A
          path: ${{ runner.temp }}/rdp-start.png
          if-no-files-found: warn

      - name: ⬆️ Upload screenshot (end)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rdp-end-screenshot-A
          path: ${{ runner.temp }}/rdp-end.png
          if-no-files-found: warn
