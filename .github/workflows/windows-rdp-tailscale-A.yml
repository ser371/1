name: RDP via Tailscale (A → B, Win2025 + screenshots + data handoff + Telegram)

on:
  workflow_dispatch:
    inputs:
      # --- Tailscale / RDP ---
      ts_tailnet:        { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:        { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:        { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      test_mode:
        description: "Run 5-minute test"
        type: boolean
        default: false
      runtime_minutes:   { description: "Runtime (max 360, capped 355)", required: false, default: "355" }
      purge_bullet:      { description: "Purge devices containing 'bullet' at start/end", required: false, default: "true" }

      # --- Cross-account dispatch target: GitHub Account 2 / Repo B ---
      b_owner:           { description: "Owner/org of Repo B", required: true }
      b_repo:            { description: "Repo name for B (no owner)", required: true }
      b_workflow:        { description: "Workflow filename in Repo B (e.g. rdp-tailscale-B.yml)", required: true }
      b_ref:             { description: "Ref/branch to run B on (e.g. main)", required: true }
      b_pat:             { description: "PAT from Account 2 with repo+workflow scopes", required: true }

      # --- Shared transfer repo (optional, for A⇄B data loop) ---
      x_owner:           { description: "Transfer repo owner/org (shared)", required: false, default: "" }
      x_repo:            { description: "Transfer repo name (no owner)", required: false, default: "" }
      x_pat:             { description: "PAT that can read/write transfer repo", required: false, default: "" }
      x_tag:             { description: "Release tag (e.g. pingpong-handoff)", required: false, default: "pingpong-handoff" }

      # --- Telegram (notifications & hourly reminders) ---
      tg_enable:
        description: "Enable Telegram notifications"
        type: boolean
        default: false
      tg_bot_token:
        description: "Telegram Bot API token"
        required: false
        default: ""
      tg_chat_id:
        description: "Telegram chat ID (user or group)"
        required: false
        default: ""

      # --- Ping-pong control ---
      cycles:            { description: "0=infinite, N=total remaining handoffs incl. this run", required: false, default: "0" }

permissions:
  contents: read
  actions: write

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

defaults:
  run:
    shell: pwsh

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370
    env:
      RDP_USER:    Bullettemporary
      RDP_PASS:    Bullet@12345
      TS_HOSTNAME: bullet
      X_DIR:       C:\Users\Public\Transfer
    steps:
      - name: Build & run (A)
        run: |
          $ErrorActionPreference = "Stop"

          # ---------- Utils ----------
          function IntOr($v,$def){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$def } }
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function Summary($title,[string[]]$lines){ (@("### $title") + $lines + "") -join "`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          $log = New-Object System.Text.StringBuilder
          function Log($s){ $null = $log.AppendLine($s); Write-Host $s }
          function TgSend([string]$text){
            if(-not (Yes("${{ inputs.tg_enable }}"))) { return }
            $token = "${{ inputs.tg_bot_token }}"; $chat = "${{ inputs.tg_chat_id }}"
            if([string]::IsNullOrWhiteSpace($token) -or [string]::IsNullOrWhiteSpace($chat)){ return }
            # Split into 3900-char chunks to stay below Telegram 4096 limit
            for($i=0; $i -lt $text.Length; $i+=3900){
              $chunk = $text.Substring($i, [Math]::Min(3900, $text.Length - $i))
              try{
                Invoke-WebRequest -Method POST -Uri "https://api.telegram.org/bot$token/sendMessage" `
                  -ContentType "application/x-www-form-urlencoded" `
                  -Body @{chat_id=$chat; text=$chunk; parse_mode="Markdown"} -UseBasicParsing | Out-Null
              }catch{ Write-Warning "Telegram send failed: $_" }
            }
          }

          # ---------- Tailscale & RDP ----------
          function Ensure-Tailscale {
            $exe = "C:\Program Files\Tailscale\tailscale.exe"
            if (-not (Test-Path $exe)) {
              $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
              $dst = "$env:TEMP\tailscale-setup.exe"
              Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
              Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
            }
            Start-Service Tailscale -ErrorAction SilentlyContinue
          }
          function Enable-RDP($u,$p){
            $sec = ConvertTo-SecureString $p -AsPlainText -Force
            if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $u -Password $sec -AccountNeverExpires | Out-Null
              Add-LocalGroupMember -Group Administrators -Member $u
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
            } else { Set-LocalUser -Name $u -Password $sec -AccountNeverExpires; Enable-LocalUser -Name $u }
            Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          }
          function Purge-Bullet($apiKey,$tailnet){
            try{
              $tn = [uri]::EscapeUriString($tailnet)
              $hdr = @{ Authorization = "Bearer $apiKey" }
              $resp = Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers $hdr -UseBasicParsing
              $json = $resp.Content | ConvertFrom-Json
              foreach($d in $json.devices){
                if( ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet') ){
                  try{ Invoke-WebRequest -Method Delete -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) -Headers $hdr -UseBasicParsing | Out-Null; Log "Deleted: $($d.name)" }
                  catch{ Write-Warning "Delete failed for $($d.name): $_" }
                }
              }
            }catch{ Write-Warning "Purge failed: $_" }
          }
          function TS-Up($authKey,$hostname){
            $ts = "C:\Program Files\Tailscale\tailscale.exe"
            & $ts logout | Out-Null
            & $ts up --authkey "$authKey" --hostname "$hostname" --accept-routes --accept-dns=false
            Start-Sleep -Seconds 2
            $ip4 = (& $ts ip -4 | Select-Object -First 1)
            $st  = & $ts status --json | ConvertFrom-Json
            return [pscustomobject]@{ IPv4=$ip4; MagicDNS=$st.Self.DNSName; DERP=$st.Self.DERP }
          }

          # ---------- Transfer (optional) ----------
          function X-Ensure-Release($owner,$repo,$tag,$pat){
            if([string]::IsNullOrWhiteSpace($owner)){ return $null }
            $base = "https://api.github.com/repos/$owner/$repo"
            $hdr  = @{ Authorization="Bearer $pat"; "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            try { ($ (Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content | ConvertFrom-Json).id }
            catch {
              $body = @{ tag_name=$tag; name=$tag; draft=$false; prerelease=$false } | ConvertTo-Json
              ($ (Invoke-WebRequest -Method POST -Uri "$base/releases" -Headers $hdr -Body $body -UseBasicParsing).Content | ConvertFrom-Json).id
            }
          }
          function X-Download-Latest($owner,$repo,$tag,$prefix,$outFile,$pat){
            if([string]::IsNullOrWhiteSpace($owner)){ return $false }
            $base = "https://api.github.com/repos/$owner/$repo"
            $hdr  = @{ Authorization="Bearer $pat"; "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            $rels = (Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content | ConvertFrom-Json
            $asset = $rels.assets | Where-Object { $_.name -like "$prefix*" } | Sort-Object created_at -Descending | Select-Object -First 1
            if (-not $asset) { return $false }
            Invoke-WebRequest -Uri $asset.browser_download_url -Headers $hdr -OutFile $outFile -UseBasicParsing
            return $true
          }
          function X-Upload-Asset($owner,$repo,$releaseId,$filePath,$name,$pat){
            if([string]::IsNullOrWhiteSpace($owner)){ return }
            $url  = "https://uploads.github.com/repos/$owner/$repo/releases/$releaseId/assets?name=$name"
            $hdr  = @{ Authorization="Bearer $pat"; "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -ContentType "application/zip" -InFile $filePath -UseBasicParsing | Out-Null
          }

          # ---------- Inputs ----------
          $tailnet   = "${{ inputs.ts_tailnet }}"
          $apiKey    = "${{ inputs.ts_api_key }}"
          $authKey   = "${{ inputs.ts_authkey }}"
          $test      = Yes("${{ inputs.test_mode }}")
          $runtime   = IntOr("${{ inputs.runtime_minutes }}" , 355); if ($test) { $runtime = 5 }; if (-not $test -and $runtime -lt 6) { $runtime = 355 }; if ($runtime -gt 360) { $runtime = 355 }
          $doPurge   = Yes("${{ inputs.purge_bullet }}")
          $bOwner    = "${{ inputs.b_owner }}"; $bRepo="${{ inputs.b_repo }}"; $bWorkflow="${{ inputs.b_workflow }}"; $bRef="${{ inputs.b_ref }}"; $bPAT="${{ inputs.b_pat }}"
          $xOwner    = "${{ inputs.x_owner }}"; $xRepo="${{ inputs.x_repo }}"; $xPAT="${{ inputs.x_pat }}"; $xTag="${{ inputs.x_tag }}"
          $cycles    = IntOr("${{ inputs.cycles }}", 0); $nextCycles = if ($cycles -gt 0) { $cycles - 1 } else { 0 }

          Summary "Inputs (A)" @("| Key | Value |","|---|---|","| TestMode | $test |","| Runtime | $runtime |","| CyclesLeft | $cycles |","| Hostname | $env:TS_HOSTNAME |","| TransferRepo | $xOwner/$xRepo#$xTag |","| Next target | $bOwner/$bRepo@$bRef → $bWorkflow |")
          TgSend ("🟦 *A started* in `${{ github.repository }}` on `${{ github.ref_name }}``nRuntime: *$runtime* min`nTarget next: *$bOwner/$bRepo* → *$bWorkflow*@*$bRef*")

          # ---------- Restore incoming data (from B) ----------
          if(-not [string]::IsNullOrWhiteSpace($xOwner)){
            New-Item -ItemType Directory -Path $env:X_DIR -Force | Out-Null
            $relId = X-Ensure-Release $xOwner $xRepo $xTag $xPAT
            $inZip = Join-Path $env:RUNNER_TEMP "handoff_latest_from_B.zip"
            if (X-Download-Latest $xOwner $xRepo $xTag "handoff_B_to_A_" $inZip $xPAT){
              try { Expand-Archive -LiteralPath $inZip -DestinationPath $env:X_DIR -Force; Summary "Restore" @("Restored **$($inZip | Split-Path -Leaf)** → `$env:X_DIR`") }
              catch { Write-Warning "Expand failed: $_" }
            }
          }

          # ---------- RDP session ----------
          Ensure-Tailscale; Enable-RDP $env:RDP_USER $env:RDP_PASS
          if ($doPurge){ Purge-Bullet $apiKey $tailnet }

          $net = TS-Up $authKey $env:TS_HOSTNAME
          Summary "RDP (A)" @("**User:** $env:RDP_USER","**Pass:** $env:RDP_PASS","**IPv4:** $($net.IPv4)","**MagicDNS:** $($net.MagicDNS)","**DERP:** $($net.DERP)")
          $null = $log.AppendLine("IPv4: $($net.IPv4)"); $null = $log.AppendLine("MagicDNS: $($net.MagicDNS)"); $null = $log.AppendLine("DERP: $($net.DERP)")

          # Screenshot start
          Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
          $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds; $img=New-Object System.Drawing.Bitmap $b.Width,$b.Height
          $g=[System.Drawing.Graphics]::FromImage($img); $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
          $startPng=Join-Path $env:RUNNER_TEMP "rdp-start.png"; $img.Save($startPng,[System.Drawing.Imaging.ImageFormat]::Png); $g.Dispose();$img.Dispose()

          # Keep alive + hourly reminders
          $end=(Get-Date).AddMinutes($runtime); $lastHour=-1
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            $hr=[int][math]::Floor($left/60)
            if($hr -ne $lastHour){ $lastHour=$hr; TgSend ("⏰ *A reminder*: $left min left (`$hr h approx`)") }
            Start-Sleep -Seconds 60
          }

          # Screenshot end
          try {
            Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
            $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds; $img=New-Object System.Drawing.Bitmap $b.Width,$b.Height
            $g=[System.Drawing.Graphics]::FromImage($img); $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
            $endPng=Join-Path $env:RUNNER_TEMP "rdp-end.png"; $img.Save($endPng,[System.Drawing.Imaging.ImageFormat]::Png); $g.Dispose();$img.Dispose()
          } catch { Write-Warning "Exit screenshot failed: $_" }

          if ($doPurge){ Purge-Bullet $apiKey $tailnet }

          # Package & upload outgoing data (to B)
          if(-not [string]::IsNullOrWhiteSpace($xOwner)){
            $relId = X-Ensure-Release $xOwner $xRepo $xTag $xPAT
            $stamp=(Get-Date).ToString("yyyyMMdd_HHmmss")
            $outZip = Join-Path $env:RUNNER_TEMP ("handoff_A_to_B_{0}.zip" -f $stamp)
            if (Test-Path $env:X_DIR -and (Get-ChildItem -Path $env:X_DIR -Recurse -Force | Where-Object { -not $_.PSIsContainer })) {
              if (Test-Path $outZip) { Remove-Item $outZip -Force }
              Compress-Archive -Path (Join-Path $env:X_DIR '*') -DestinationPath $outZip -Force
              X-Upload-Asset $xOwner $xRepo $relId $outZip ($outZip | Split-Path -Leaf) $xPAT
              Summary "Package" @("Uploaded **$($outZip | Split-Path -Leaf)** to **$xOwner/$xRepo** release **$xTag**")
            }
          }

          # Telegram final + dispatch notice
          TgSend ("🟦 *A finished* — dispatching to *$bOwner/$bRepo* → *$bWorkflow*@*$bRef*`n$($log.ToString())")
      - name: ⬆️ Upload screenshot (start)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-start-screenshot-A
          path: ${{ runner.temp }}/rdp-start.png
          if-no-files-found: warn

      - name: ⬆️ Upload screenshot (end)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rdp-end-screenshot-A
          path: ${{ runner.temp }}/rdp-end.png
          if-no-files-found: warn

      - name: Dispatch B (cross-account)
        if: always()
        run: |
          $cycles  = "${{ inputs.cycles }}"
          if ($cycles -eq "1") { Write-Host "Ping-pong cycles exhausted (1→0). Stop."; exit 0 }

          $payload = @{
            ts_tailnet      = "${{ inputs.ts_tailnet }}"
            ts_api_key      = "${{ inputs.ts_api_key }}"
            ts_authkey      = "${{ inputs.ts_authkey }}"
            test_mode       = "false"
            runtime_minutes = "${{ inputs.runtime_minutes }}"
            purge_bullet    = "${{ inputs.purge_bullet }}"
            a_owner         = "${{ github.repository_owner }}"
            a_repo          = "${{ github.event.repository.name }}"
            a_workflow      = "rdp-tailscale-A.yml"
            a_ref           = "${{ github.ref_name }}"
            a_pat           = "${{ secrets.A_PAT || '' }}"
            x_owner         = "${{ inputs.x_owner }}"
            x_repo          = "${{ inputs.x_repo }}"
            x_pat           = "${{ inputs.x_pat }}"
            x_tag           = "${{ inputs.x_tag }}"
            tg_enable       = "${{ inputs.tg_enable }}"
            tg_bot_token    = "${{ inputs.tg_bot_token }}"
            tg_chat_id      = "${{ inputs.tg_chat_id }}"
            cycles          = "$(( [int](${{ inputs.cycles }}) -ge 1) ? ([int](${{ inputs.cycles }}) - 1) : 0)"
          }

          $url = "https://api.github.com/repos/${{ inputs.b_owner }}/${{ inputs.b_repo }}/actions/workflows/${{ inputs.b_workflow }}/dispatches"
          $hdr = @{ Authorization = "Bearer ${{ inputs.b_pat }}"; Accept = "application/vnd.github+json"; "User-Agent" = "rdp-pingpong-A" }
          $body = @{ ref = "${{ inputs.b_ref }}"; inputs = $payload } | ConvertTo-Json -Depth 8
          Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
          Write-Host "Dispatched to ${{ inputs.b_owner }}/${{ inputs.b_repo }} → ${{ inputs.b_workflow }}"
