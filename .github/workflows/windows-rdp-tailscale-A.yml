name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable or ephemeral)"
        required: true
      gh_api_token:
        description: "GitHub Personal Access Token (classic) with scopes: repo, workflow"
        required: true
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360, capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many loops (0 = infinite)"
        required: false
        default: "0"

permissions:
  contents: write
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: Bullettemporary
  RDP_PASS: Bullet@12345
  TS_HOSTNAME: bullet

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs
        id: cfg
        run: |
          $ev = ConvertFrom-Json '${{ toJson(github.event) }}'
          $i = $ev.inputs
          $tailnet = $i.ts_tailnet
          $apiKey  = $i.ts_api_key
          $authKey = $i.ts_authkey
          $apiTok  = $i.gh_api_token
          $test    = [bool]$i.test_mode
          $runtime = [int]$i.runtime_minutes
          $loops   = [int]$i.loops

          if (-not $tailnet -or -not $apiKey -or -not $authKey -or -not $apiTok) { Write-Error "Missing required inputs"; exit 1 }
          if ($test) { $runtime = 5 }
          if (-not $runtime -or $runtime -gt 360) { $runtime = 355 }
          if ($runtime -gt 355) { $runtime = 355 }
          if ($loops -lt 0) { $loops = 0 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "apitok=$apiTok"   | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT

      - name: ‚öôÔ∏è Install Tailscale (if missing) & version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: üîê Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üßπ Purge bullet* devices (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $pat = '^(?i)bullet(\b|\.|-)'
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if ($d.name -match $pat) {
                try { Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null } catch {}
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up (hostname=bullet)
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = $status.Self.DNSName
          "### RDP (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      # (No winget install step; runners block MSIX. We'll use winget if present, else fall back to Chocolatey.)
      - name: üß∞ Apps & Shortcuts (winget if available, else Chocolatey)
        run: |
          $ErrorActionPreference = "Continue"

          function Add-Shortcut { param($Name,$Target) try {
            $Desktop=[Environment]::GetFolderPath("Desktop")
            $Path=Join-Path $Desktop "$Name.lnk"
            $Wsh=New-Object -ComObject WScript.Shell
            $S=$Wsh.CreateShortcut($Path)
            $S.TargetPath=$Target; $S.Save()
            Write-Host "Shortcut added: $Name"
          } catch { Write-Warning "Shortcut failed $Name : $_" } }

          function Add-WebShortcut { param($Name,$Url) try {
            $Desktop=[Environment]::GetFolderPath("Desktop")
            $Path=Join-Path $Desktop "$Name.url"
            $Content="[InternetShortcut]`nURL=$Url`nIconFile=%SystemRoot%\system32\url.dll`nIconIndex=0"
            Set-Content -Path $Path -Value $Content -Encoding Ascii
            Write-Host "Web shortcut added: $Name"
          } catch { Write-Warning "Web shortcut failed $Name : $_" } }

          $haveWinget = Get-Command winget -ErrorAction SilentlyContinue
          if ($haveWinget) {
            Write-Host "‚úÖ Using winget"
            $wing = { param([Parameter(ValueFromRemainingArguments=$true)][string[]]$args) winget @args --silent --accept-source-agreements --accept-package-agreements | Out-Host }
            # Uninstall unwanted
            & $wing uninstall --id EpicGames.EpicGamesLauncher
            & $wing uninstall --id RProject.R --version 4.4.2
            & $wing uninstall --id UnityTechnologies.UnityHub
            # Install wanted
            & $wing install --id Mozilla.Firefox.DeveloperEdition
            & $wing install --id Brave.Brave
            & $wing install --id VivaldiTechnologies.Vivaldi
            & $wing install --id Opera.OperaGX
            & $wing install --id WhatsApp.WhatsApp
            & $wing install --id Telegram.TelegramDesktop
            & $wing install --id VideoLAN.VLC
            & $wing install --id Ookla.Speedtest
            & $wing install --id ProtonVPN.ProtonVPN
            & $wing install --id Microsoft.BingWallpaper
            & $wing install --id Microsoft.OneDrive
          }
          else {
            Write-Warning "winget not available; installing Chocolatey and using choco fallback."
            try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Invoke-Expression (Invoke-WebRequest https://community.chocolatey.org/install.ps1 -UseBasicParsing).Content
            } catch { Write-Warning "Chocolatey install failed: $_" }
            function ch { param([string]$pkg) try { choco install -y $pkg | Out-Host } catch { Write-Warning "choco failed for $pkg : $_" } }
            function chrm { param([string]$pkg) try { choco uninstall -y $pkg | Out-Host } catch { Write-Warning "choco uninstall failed for $pkg : $_" } }
            # Uninstall unwanted (best-effort names)
            chrm epicgameslauncher
            chrm r.project  # may not match; best-effort
            chrm unity-hub
            # Install wanted (best-effort names)
            ch brave
            ch vivaldi
            ch opera-gx
            ch whatsapp
            ch telegram
            ch vlc
            ch speedtest
            ch protonvpn
            # Bing wallpaper/OneDrive often not on choco; skipped if missing
            ch bing-wallpaper
            ch onedrive
          }

          # Web shortcuts always
          Add-WebShortcut -Name "ChatGPT"  -Url "https://chat.openai.com/"
          Add-WebShortcut -Name "Instagram" -Url "https://www.instagram.com/"
          Add-WebShortcut -Name "Gmail"     -Url "https://mail.google.com/"

      - name: ‚è≥ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }

      - name: üßπ Purge bullet* devices (exit)
        if: always()
        run: |
          $hdr=@{ Authorization="Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn=[uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $pat='^(?i)bullet(\b|\.|-)'
          try {
            $resp=Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach($d in $resp.devices){ if($d.name -match $pat){ try { Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null } catch {} } }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: üîÅ Dispatch workflow B (no delay; inputs as strings)
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching B."; exit 0 }
          if ($loops -gt 1) { $next=$loops-1 } else { $next=0 }
          $token="${{ steps.cfg.outputs.apitok }}"
          $body=@{
            ref    = "${{ github.ref_name }}"
            inputs = @{
              ts_tailnet      = "${{ steps.cfg.outputs.tailnet }}"
              ts_api_key      = "${{ steps.cfg.outputs.apikey }}"
              ts_authkey      = "${{ steps.cfg.outputs.authkey }}"
              gh_api_token    = "$token"
              test_mode       = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops           = "$next"
            }
          } | ConvertTo-Json -Depth 5
          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-rdp-tailscale-B.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
