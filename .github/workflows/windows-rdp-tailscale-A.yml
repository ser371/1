name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin) ‚Äî DO NOT add 'Bearer'"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable or ephemeral)"
        required: true
      gh_api_token:
        description: "GitHub Personal Access Token (classic) with scopes: repo, workflow (REQUIRED)"
        required: true
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime per run (minutes, max 360; capped to 355 when not in test mode)"
        required: false
        default: "355"
      loops:
        description: "How many loops (A‚ÜíB‚ÜíA‚Ä¶). 0 = infinite"
        required: false
        default: "0"

permissions:
  contents: write
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: Bullettemporary
  RDP_PASS: Bullet@12345
  TS_HOSTNAME: bullet

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs
        id: cfg
        run: |
          $ev = ConvertFrom-Json '${{ toJson(github.event) }}'
          $tailnet = $ev.inputs.ts_tailnet
          $apiKey  = $ev.inputs.ts_api_key
          $authKey = $ev.inputs.ts_authkey
          $apiTok  = $ev.inputs.gh_api_token
          $test    = [bool]$ev.inputs.test_mode
          $runtime = [int]$ev.inputs.runtime_minutes
          $loops   = [int]$ev.inputs.loops

          if (-not $tailnet -or -not $apiKey -or -not $authKey) {
            Write-Error "Missing required inputs (tailnet / api_key / authkey)."; exit 1
          }
          if (-not $apiTok) { Write-Error "gh_api_token (PAT with repo+workflow) is REQUIRED."; exit 1 }

          if ($test) { $runtime = 5 }
          if (-not $runtime -or $runtime -gt 360) { $runtime = 355 }
          if ($runtime -gt 355) { $runtime = 355 }
          if ($loops -lt 0) { $loops = 0 } # 0 = infinite

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "apitok=$apiTok"   | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT

      - name: ‚öôÔ∏è Install Tailscale (if missing) & version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: üîê Enable RDP + user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üßπ Purge bullet* devices (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $pat = '^(?i)bullet(\b|\.|-)'
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if ($d.name -match $pat) {
                try { Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null }
                catch { Write-Warning "Skip delete $($d.name)" }
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up (hostname=bullet)
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = $status.Self.DNSName
          "### RDP CONNECT (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: üß∞ Uninstall + Install apps and create Desktop shortcuts
        run: |
          $ErrorActionPreference = "Continue"
          function Wing { param($args) winget $args --silent --accept-source-agreements --accept-package-agreements | Out-Host }
          function Add-Shortcut($Name,$Target,$Args="",$Icon="") {
            try {
              $Desktop = [Environment]::GetFolderPath("Desktop")
              $Path = Join-Path $Desktop "$Name.lnk"
              $Wsh = New-Object -ComObject WScript.Shell
              $Shortcut = $Wsh.CreateShortcut($Path)
              $Shortcut.TargetPath = $Target
              if ($Args)  { $Shortcut.Arguments  = $Args }
              if ($Icon)  { $Shortcut.IconLocation = $Icon }
              $Shortcut.WorkingDirectory = Split-Path $Target -Parent
              $Shortcut.Save()
              Write-Host "Shortcut added: $Name"
            } catch { Write-Warning "Shortcut failed for $Name : $_" }
          }
          function Add-WebShortcut($Name,$Url){
            try{
              $Desktop = [Environment]::GetFolderPath("Desktop")
              $Path = Join-Path $Desktop "$Name.url"
              @"
[InternetShortcut]
URL=$Url
IconFile=%SystemRoot%\system32\url.dll
IconIndex=0
"@ | Out-File -Encoding ascii $Path
              Write-Host "Web shortcut added: $Name"
            } catch { Write-Warning "Web shortcut failed $Name : $_" }
          }

          # Uninstall unwanted
          Wing uninstall --id EpicGames.EpicGamesLauncher
          Wing uninstall --id RProject.R --version 4.4.2
          Wing uninstall --id UnityTechnologies.UnityHub

          # Install browsers / tools
          Wing install --id Mozilla.Firefox.DeveloperEdition
          Wing install --id Brave.Brave
          Wing install --id VivaldiTechnologies.Vivaldi
          Wing install --id Opera.OperaGX
          Wing install --id WhatsApp.WhatsApp
          Wing install --id Telegram.TelegramDesktop
          Wing install --id VideoLAN.VLC
          Wing install --id Ookla.Speedtest
          Wing install --id ProtonVPN.ProtonVPN
          Wing install --id Microsoft.BingWallpaper
          # OneDrive normally present; ensure up to date
          Wing install --id Microsoft.OneDrive

          # Paths (best-effort)
          $paths = @{
            "Firefox Developer Edition" = "C:\Program Files\Firefox Developer Edition\firefox.exe"
            "Brave Browser"             = "C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe"
            "Vivaldi"                   = "C:\Program Files\Vivaldi\Application\vivaldi.exe"
            "Opera GX"                  = "$env:LOCALAPPDATA\Programs\Opera GX\launcher.exe"
            "WhatsApp"                  = "$env:LOCALAPPDATA\Microsoft\WindowsApps\WhatsApp.exe"
            "Telegram"                  = "$env:APPDATA\Telegram Desktop\Telegram.exe"
            "VLC media player"          = "C:\Program Files\VideoLAN\VLC\vlc.exe"
            "Speedtest"                 = "C:\Program Files\Ookla\Speedtest\speedtest.exe"
            "Proton VPN"                = "C:\Program Files\Proton\VPN\Proton VPN.exe"
            "OneDrive"                  = "$env:LOCALAPPDATA\Microsoft\OneDrive\OneDrive.exe"
          }
          foreach ($k in $paths.Keys) {
            $p = [Environment]::ExpandEnvironmentVariables($paths[$k])
            if (Test-Path $p) { Add-Shortcut -Name $k -Target $p }
          }
          # Web shortcuts for services without reliable EXE
          Add-WebShortcut -Name "ChatGPT" -Url "https://chat.openai.com/"
          Add-WebShortcut -Name "Instagram" -Url "https://www.instagram.com/"

      - name: ‚è≥ Keep alive
        run: |
          $mins = [int]"${{ steps.cfg.outputs.runtime }}"
          $end  = (Get-Date).AddMinutes($mins)
          while ((Get-Date) -lt $end) {
            $left = [int]([math]::Ceiling(($end - (Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }

      - name: üßπ Purge bullet* devices (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $pat = '^(?i)bullet(\b|\.|-)'
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if ($d.name -match $pat) {
                try { Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null } catch {}
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: üîÅ Dispatch workflow B (no delay; requires PAT)
        if: always()
        run: |
          $loops = [int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -gt 0) { $nextLoops = $loops - 1 } else { $nextLoops = 0 }  # 0 = infinite
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching B."; exit 0 }
          $token = "${{ steps.cfg.outputs.apitok }}"
          $body  = @{
            ref    = "${{ github.ref_name }}"
            inputs = @{
              ts_tailnet      = "${{ steps.cfg.outputs.tailnet }}"
              ts_api_key      = "${{ steps.cfg.outputs.apikey }}"
              ts_authkey      = "${{ steps.cfg.outputs.authkey }}"
              gh_api_token    = $token
              test_mode       = $false
              runtime_minutes = [int]"${{ steps.cfg.outputs.runtime }}"
              loops           = $nextLoops
            }
          } | ConvertTo-Json -Depth 5
          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-rdp-tailscale-B.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
