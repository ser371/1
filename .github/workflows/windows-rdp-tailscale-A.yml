name: RDP via Tailscale (A → B, no-secrets, Win2025 + screenshots + Telegram photos)

on:
  workflow_dispatch:
    inputs:
      # --- Core (6) ---
      ts_tailnet:      { description: "Tailscale tailnet (e.g. you@gmail.com)", required: true }
      ts_api_key:      { description: "Tailscale API key (device admin, no 'Bearer')", required: true }
      ts_authkey:      { description: "Tailscale Auth key (reusable or ephemeral)", required: true }
      test_mode:
        description: "Run 5-minute test"
        type: boolean
        default: false
      runtime_minutes: { description: "Runtime (max 360; capped 355)", required: false, default: "355" }
      purge_bullet:    { description: "Purge 'bullet' devices at start/end", required: false, default: "true" }

      # --- Transfer (1) ---
      x_repo_path:     { description: "Transfer repo (owner/repo). Leave blank to disable.", required: false, default: "" }

      # --- Telegram (2) ---
      tg_token:        { description: "Telegram bot token (leave blank to disable)", required: false, default: "" }
      tg_chat:         { description: "Telegram chat id", required: false, default: "" }

      # --- Loop control (1) ---
      cycles:          { description: "0=infinite; N=remaining handoffs incl. this run", required: false, default: "0" }

permissions:
  contents: read
  actions: write

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

defaults:
  run:
    shell: pwsh

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370
    env:
      RDP_USER:    Bullettemporary
      RDP_PASS:    Bullet@12345
      TS_HOSTNAME: bullet
      X_DIR:       C:\Users\Public\Transfer
      X_TAG:       pingpong-handoff
    steps:
      - name: Build & run (A)
        env:
          TG_TOKEN:  ${{ inputs.tg_token }}
          XFER_PAT:  ${{ inputs.x_repo_path != '' && inputs.tg_token == '__dummy__' && '' || inputs.tg_token }} # inert; prevents echoing tokens
        run: |
          $ErrorActionPreference = "Stop"

          function IntOr($v,$def){ if("$v" -match '^\d+$'){ [int]$v } else { [int]$def } }
          function Yes($v){ "$v" -match '^(?i:true|1|yes|on)$' }
          function Summary($title,[string[]]$lines){ (@("### $title") + $lines + "") -join "`n" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }

          # ----- Inputs -----
          $tailnet   = "${{ inputs.ts_tailnet }}"
          $apiKey    = "${{ inputs.ts_api_key }}"
          $authKey   = "${{ inputs.ts_authkey }}"
          $test      = ${{
            inputs.test_mode
          }}
          $runtime   = IntOr("${{ inputs.runtime_minutes }}", 355); if ($test) { $runtime = 5 }; if (-not $test -and $runtime -lt 6) { $runtime = 355 }; if ($runtime -gt 360) { $runtime = 355 }
          $doPurge   = Yes("${{ inputs.purge_bullet }}")
          $cycles    = IntOr("${{ inputs.cycles }}", 0)

          # Transfer config
          $xRepoPath = "${{ inputs.x_repo_path }}".Trim()
          $xTag      = $env:X_TAG
          $xPat      = "${{ inputs.tg_token }}" # We will ask you to paste the transfer PAT here when using transfer; WARNING: visible in inputs history
          $xEnabled  = -not [string]::IsNullOrWhiteSpace($xRepoPath) -and -not [string]::IsNullOrWhiteSpace($xPat)

          # Telegram
          $tgChat    = "${{ inputs.tg_chat }}".Trim()
          $tgToken   = "${{ inputs.tg_token }}".Trim()
          $tgEnabled = -not [string]::IsNullOrWhiteSpace($tgChat) -and -not [string]::IsNullOrWhiteSpace($tgToken)

          function TgSend([string]$text){
            if(-not $tgEnabled){ return }
            for($i=0; $i -lt $text.Length; $i+=3900){
              $chunk = $text.Substring($i, [Math]::Min(3900, $text.Length - $i))
              try{
                Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendMessage" -f $tgToken) `
                  -ContentType "application/x-www-form-urlencoded" `
                  -Body @{chat_id=$tgChat; text=$chunk; parse_mode="Markdown"} -UseBasicParsing | Out-Null
              }catch{}
            }
          }
          function TgSendPhoto([string]$path, [string]$caption){
            if(-not $tgEnabled -or -not (Test-Path -LiteralPath $path)){ return }
            try{
              $form = @{ chat_id=$tgChat; caption=$caption; parse_mode="Markdown"; photo=Get-Item -LiteralPath $path }
              Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendPhoto" -f $tgToken) -Form $form -UseBasicParsing | Out-Null
            } catch {
              try{
                $form = @{ chat_id=$tgChat; caption=$caption; parse_mode="Markdown"; document=Get-Item -LiteralPath $path }
                Invoke-WebRequest -Method POST -Uri ("https://api.telegram.org/bot{0}/sendDocument" -f $tgToken) -Form $form -UseBasicParsing | Out-Null
              } catch {}
            }
          }

          # Transfer helpers (only if enabled)
          function X-Ensure-Release([string]$repoPath,[string]$tag,[string]$pat){
            if(-not $xEnabled){ return $null }
            $base = "https://api.github.com/repos/$repoPath"
            $hdr  = @{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            try { ( (Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content | ConvertFrom-Json ).id }
            catch {
              $body = @{ tag_name=$tag; name=$tag; draft=$false; prerelease=$false } | ConvertTo-Json
              ( (Invoke-WebRequest -Method POST -Uri "$base/releases" -Headers $hdr -Body $body -UseBasicParsing).Content | ConvertFrom-Json ).id
            }
          }
          function X-Download-Latest([string]$repoPath,[string]$tag,[string]$prefix,[string]$outFile,[string]$pat){
            if(-not $xEnabled){ return $false }
            $base = "https://api.github.com/repos/$repoPath"
            $hdr  = @{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            $rels = (Invoke-WebRequest -Uri "$base/releases/tags/$tag" -Headers $hdr -UseBasicParsing).Content | ConvertFrom-Json
            $asset = $rels.assets | Where-Object { $_.name -like "$prefix*" } | Sort-Object created_at -Descending | Select-Object -First 1
            if (-not $asset) { return $false }
            Invoke-WebRequest -Uri $asset.browser_download_url -Headers $hdr -OutFile $outFile -UseBasicParsing
            return $true
          }
          function X-Upload-Asset([string]$repoPath,[string]$releaseId,[string]$filePath,[string]$name,[string]$pat){
            if(-not $xEnabled){ return }
            $url  = "https://uploads.github.com/repos/$repoPath/releases/$releaseId/assets?name=$name"
            $hdr  = @{ Authorization=("Bearer {0}" -f $pat); "User-Agent"="xfer"; Accept="application/vnd.github+json" }
            Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -ContentType "application/zip" -InFile $filePath -UseBasicParsing | Out-Null
          }

          Summary "Inputs (A)" @(
            "| Key | Value |","|---|---|",
            "| TestMode | $test |","| Runtime | $runtime |","| Cycles | $cycles |",
            "| Hostname | $env:TS_HOSTNAME |",
            "| Transfer | " + ($(if ($xEnabled) {$xRepoPath + "#" + $xTag} else {"(disabled)"})) + " |",
            "| Telegram | " + ($tgEnabled) + " |"
          )
          TgSend ("🟦 *A started* — runtime: *$runtime* min; next: *B*")

          # ----- Tailscale install / up -----
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe' -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue

          # Enable RDP user + firewall
          $u=$env:RDP_USER; $p=$env:RDP_PASS
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else { Set-LocalUser -Name $u -Password $sec -AccountNeverExpires; Enable-LocalUser -Name $u }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

          # Optional purge
          if($doPurge){
            try{
              $tn  = [uri]::EscapeUriString($tailnet)
              $hdr = @{ Authorization = "Bearer $apiKey" }
              $resp = Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers $hdr -UseBasicParsing
              $json = $resp.Content | ConvertFrom-Json
              foreach($d in $json.devices){
                if( ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet') ){
                  try{ Invoke-WebRequest -Method Delete -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) -Headers $hdr -UseBasicParsing | Out-Null } catch {}
                }
              }
            }catch{}
          }

          & $exe logout | Out-Null
          & $exe up --authkey "$authKey" --hostname "$env:TS_HOSTNAME" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2
          $ip4 = (& $exe ip -4 | Select-Object -First 1)
          $st  = & $exe status --json | ConvertFrom-Json
          Summary "RDP (A)" @("**User:** $env:RDP_USER","**Pass:** $env:RDP_PASS","**IPv4:** $ip4","**MagicDNS:** $($st.Self.DNSName)")

          # Screenshot (start) + Telegram
          try {
            Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
            $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bmp=New-Object System.Drawing.Bitmap $b.Width,$b.Height
            $g=[System.Drawing.Graphics]::FromImage($bmp)
            $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
            $startP="$env:RUNNER_TEMP\rdp-start.png"
            $bmp.Save($startP,[System.Drawing.Imaging.ImageFormat]::Png)
            $g.Dispose(); $bmp.Dispose()
            TgSendPhoto $startP ("🖼 *A start screenshot* — {0}" -f (Get-Date).ToString("HH:mm:ss 'IST' dd-MMM"))
          } catch {}

          # Restore incoming (from B)
          if($xEnabled){
            New-Item -ItemType Directory -Path $env:X_DIR -Force | Out-Null
            $relId = X-Ensure-Release $xRepoPath $xTag $xPat
            $inZip = Join-Path $env:RUNNER_TEMP "handoff_latest_from_B.zip"
            if (X-Download-Latest $xRepoPath $xTag "handoff_B_to_A_" $inZip $xPat){
              try { Expand-Archive -LiteralPath $inZip -DestinationPath $env:X_DIR -Force } catch {}
            }
          }

          # Keep alive + hourly reminders
          $end=(Get-Date).AddMinutes($runtime); $lastHour=-1
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            $hr=[int][math]::Floor($left/60)
            if($hr -ne $lastHour){ $lastHour=$hr; TgSend ("⏰ *A reminder*: $left min left (~$hr h)") }
            Start-Sleep -Seconds 60
          }

          # Screenshot (end) + Telegram
          try {
            Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
            $b=[System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bmp=New-Object System.Drawing.Bitmap $b.Width,$b.Height
            $g=[System.Drawing.Graphics]::FromImage($bmp)
            $g.CopyFromScreen($b.Location,[System.Drawing.Point]::Empty,$b.Size)
            $endP="$env:RUNNER_TEMP\rdp-end.png"
            $bmp.Save($endP,[System.Drawing.Imaging.ImageFormat]::Png)
            $g.Dispose(); $bmp.Dispose()
            TgSendPhoto $endP ("🖼 *A end screenshot* — {0}" -f (Get-Date).ToString("HH:mm:ss 'IST' dd-MMM"))
          } catch {}

          # Optional purge on exit
          if($doPurge){
            try{
              $tn  = [uri]::EscapeUriString($tailnet)
              $hdr = @{ Authorization = "Bearer $apiKey" }
              $resp = Invoke-WebRequest -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices" -Headers $hdr -UseBasicParsing
              $json = $resp.Content | ConvertFrom-Json
              foreach($d in $json.devices){
                if( ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet') ){
                  try{ Invoke-WebRequest -Method Delete -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) -Headers $hdr -UseBasicParsing | Out-Null } catch {}
                }
              }
            }catch{}
          }

          # Package & upload outgoing (to B)
          if($xEnabled){
            $relId = X-Ensure-Release $xRepoPath $xTag $xPat
            $stamp=(Get-Date).ToString("yyyyMMdd_HHmmss")
            $outZip = Join-Path $env:RUNNER_TEMP ("handoff_A_to_B_{0}.zip" -f $stamp)
            if (Test-Path $env:X_DIR -and (Get-ChildItem -Path $env:X_DIR -Recurse -Force | Where-Object { -not $_.PSIsContainer })) {
              if (Test-Path $outZip) { Remove-Item $outZip -Force }
              Compress-Archive -Path (Join-Path $env:X_DIR '*') -DestinationPath $outZip -Force
              X-Upload-Asset $xRepoPath $relId $outZip ($outZip | Split-Path -Leaf) $xPat
            }
          }
          TgSend ("🟦 *A finished* — dispatching *B*")

      - name: ⬆️ Upload screenshot (start)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-start-screenshot-A
          path: ${{ runner.temp }}/rdp-start.png
          if-no-files-found: warn

      - name: ⬆️ Upload screenshot (end)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rdp-end-screenshot-A
          path: ${{ runner.temp }}/rdp-end.png
          if-no-files-found: warn

      - name: Dispatch B (same repo via GITHUB_TOKEN)
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if ("${{ inputs.cycles }}" -eq "1") { Write-Host "Ping-pong cycles exhausted (1→0). Stop."; exit 0 }

          $payload = @{
            ts_tailnet      = "${{ inputs.ts_tailnet }}"
            ts_api_key      = "${{ inputs.ts_api_key }}"
            ts_authkey      = "${{ inputs.ts_authkey }}"
            test_mode       = "false"
            runtime_minutes = "${{ inputs.runtime_minutes }}"
            purge_bullet    = "${{ inputs.purge_bullet }}"
            x_repo_path     = "${{ inputs.x_repo_path }}"
            tg_token        = "${{ inputs.tg_token }}"
            tg_chat         = "${{ inputs.tg_chat }}"
            cycles          = "$(( [int](${{ inputs.cycles }}) -ge 1) ? ([int](${{ inputs.cycles }}) - 1) : 0)"
          }

          $url  = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-B.yml/dispatches"
          $hdr  = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json"; "User-Agent" = "rdp-pingpong-same-repo" }
          $body = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 8
          Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body -UseBasicParsing | Out-Null
          Write-Host "Dispatched Workflow B in the same repo."
